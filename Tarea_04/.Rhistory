install.packages("ISLR")
install.packages("ElemStatLearn")
library("ISLR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
Hitters
hitters<-Hitters
?save
View(hitters)
library("ElemStatLearn", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
saheart<-SAheart
View(saheart)
library(ISLR)
?Hitters
install.packages("xlsx")
library(microbenchmark)
?len
?length
?min
comprime_no_vect <- function(arr, a, b) {
for(i in c(1:length(arr))) {
if(arr[i]<min(a,b))
arr[i] = min(a,b)
if(arr[i]>max(a,b))
arr[i] = max(a,b)
}
}
a<-seq(0,10, 0.1)
a
comprime_no_vect(a, 2, 5)
b<-comprime_no_vect(a, 2, 5)
b
comprime_no_vect <- function(arr, a, b) {
for(i in c(1:length(arr))) {
if(arr[i]<min(a,b))
arr[i] = min(a,b)
if(arr[i]>max(a,b))
arr[i] = max(a,b)
}
return arr
}
comprime_no_vect <- function(arr, a, b) {
for(i in c(1:length(arr))) {
if(arr[i]<min(a,b))
arr[i] = min(a,b)
if(arr[i]>max(a,b))
arr[i] = max(a,b)
}
return (arr)
}
b<-comprime_no_vect(a, 2, 5)
b
comprime_no_vect <- function(arr, a, b) {
for(i in c(1:length(arr))) {
if(arr[i]<min(a,b))
arr[i] <- min(a,b)
if(arr[i]>max(a,b))
arr[i] <- max(a,b)
}
return (arr)
}
#b) Vectorizada
comprime_vect <- function(arr, a, b) {
arr[arr<min(a,b)] <- min(a,b)
arr[arr>max(a,b)] <- max(a,b)
return(arr)
}
a<-seq(0,100000, 0.1)
b<-comprime_no_vect(a)
b<-comprime_no_vect(a, 20, 30)
b
c<-comprime_vect(a, 20, 30)
sum(b-c)
c
a<-seq(0,1000000, 0.1)
microbenchmark(b_1 <- comprime_no_vect(a, 20, 30), b_1 <- comprime_vect(a, 20, 30), times = 10)
I(x, a, b) <- function{
if x>= a and x<= b
return 1
else
return 0
}
I(x, a, b) <- function{
if (x>= a and x<= b)
return 1
else
return 0
}
I <- function(x, a, b){
if (x>= a and x<= b)
return 1
else
return 0
}
I <- function(x, a, b){
if (x>= a and x<= b)
I <- function(x, a, b){
if (x>= a && x<= b)
return 1
else
return 0
}
I <- function(x, a, b){
if (x>= a && x<= b)
return 1
I <- function(x, a, b){
if (x>= a && x<= b)
I=1
else
I=0
}
I(2,0,1)
I <- function(x, a, b){
if (x>= a && x<= b)
I=1
else
I=0
return I
}
I <-function(x, min=0, max=Inf)c{
as.numeric(x >= min) * as.numeric(x <= max)
}
I <-function(x, min=0, max=Inf) {
as.numeric(x >= min) * as.numeric(x <= max)
}
I(3, 2, 1)
I(3, 2, 4)
I(3, 2, 3)
I(3, 2, 2.5)
I(2,3)
I(4,3)
p <- function(n){
if(n==1) a <- 0.4
else if (n==2) a <- 0.5
else if (n==3) a <- 0.7
else a<-0
a
}
p(1)
p(2)
p(3)
p(5)
s <- 3
cc <- 2
d <- 4
vp <- 8
d_a <- function(n){
if(n==1) a <- 4
else if (n==2) a <- 5
else if (n==3) a <- 6
else a<-0
a
}
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s)
}
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s)
sum1
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s)
sum1
}
f_d_x(2,3)
f_d_x(1,3)
d_b <- function(n){
d_a(n) - 1
}
d_b(1)
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s) + 4*x
sum2 <- x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s) + 4*x
p(n) * sum1 + (1-p(n)) * sum2
}
f_d_x(1,3)
f_d_x <- function(s, x){
sum1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s) + 4*x
sum2 <- x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3)) + (x-s)*cc*I(x,s) + (s-x) * d * I(x, 0, s) + 4*x
p(3) * sum1 + (1-p(3)) * sum2
}
f_d_x(1,3)
p(3)
d_b(3) - x ) * vp * I(x, 0, d_b(3))
d_b(3) - 3 ) * vp * I(3, 0, d_b(3))
d_b(3) - 3 ) * vp * I(3, 0, d_b(3)
(d_b(3) - 3 ) * vp * I(3, 0, d_b(3)
)
f_d_x(1,3)
p <- function(n){
if(n==1) a <- 0.4
else if (n==2) a <- 0.5
else if (n==3) a <- 0.7
else stop("n=1, 2 o 3")
a
}
p(5)
d_a <- function(n){
if(n==1) a <- 4
else if (n==2) a <- 5
else if (n==3) a <- 6
else stop("n debe tomar valores 1, 2 o 3")
a
}
d_a(5)
d_a(2)
f_d_x <- function(s, x){
sum1_1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + 4*x
sum2_1 <- x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + 4*x
p(3) * sum1 + (1-p(3)) * sum2
}
f_d_x(1,3)
x=3
s=1
x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3))
d_a(3) - x
d_a(3)
x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3))
sum1_1 + sum1_2 + sum1_3 + 4*x
sum1_1 <- x * s + (d_a(3) - x ) * vp * I(x, 0, d_a(3))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + 4*x
sum1
sum2_1 <- x * s + (d_b(3) - x ) * vp * I(x, 0, d_b(3))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + 4*x
sum2
4*x
x*s
sal <- 3
f_d_x <- function(s, x){
sum1_1 <- x * sal + (d_a(3) - x ) * vp * I(x, 0, d_a(3))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + 4*x
sum2_1 <- x * sal + (d_b(3) - x ) * vp * I(x, 0, d_b(3))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + 4*x
p(3) * sum1 + (1-p(3)) * sum2
}
f_d_x(1,3)
f_d_x(4,1+)
f_d_x(4,1)
f_d_x(0,1)
f_d_x(2,1)
?min
?zeros
?zero
f_min <- function(s, n, num_x) {
b <- 0
for i in 1:num_x {
b[i] <- f_d_x(s, i)
}
if(n==4) a<- 4*x
else a <- min(b)
a
}
f_min <- function(s, n, num_x) {
b <- 0
for i in 1:num_x {
f_min <- function(s, n, num_x) {
b <- 0
for (i in 1:num_x) {
b[i] <- f_d_x(s, i)
}
if(n==4) a<- 4*x
else a <- min(b)
a
}
f_min(1,4,2)
f_min <- function(s, x, n, num_x) {
if(n==4) a <- 4*x
else{
b <- 0
for (i in 1:num_x) {
b[i] <- f_d_x(s, i)
}
a <- min(b)
}
a
}
num_x <- 10 #número de casos posibles de xn
f_min <- function(s, x, n, num_x) {
if(n==4) a <- 4*x
else{
b <- 0
for (i in 1:num_x) {
b[i] <- f_d_x(s, i)
}
a <- min(b, na.rm = TRUE)
}
a
}
f_min(1,3,3,x_num)
num_x <- 10 #número de casos posibles de xn
f_min(1,3,3,x_num)
x_num <- 10 #número de casos posibles de xn
f_min(1,3,3,x_num)
f_min(1,3,4,x_num)
f_d_x <- function(s, x, n){
sum1_1 <- x * sal + (d_a(n) - x ) * vp * I(x, 0, d_a(n))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + f_min(s, x, n, num_x)
sum2_1 <- x * sal + (d_b(n) - x ) * vp * I(x, 0, d_b(n))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + f_min(s, x, n, num_x)
p(n) * sum1 + (1-p(n)) * sum2
}
f_d_x(1,3,3)
f_d_x <- function(s, x, n){
sum1_1 <- x * sal + (d_a(n) - x ) * vp * I(x, 0, d_a(n))
sum1_2 <- (x-s)*cc*I(x,s)
sum1_3 <- (s-x) * d * I(x, 0, s)
sum1 <- sum1_1 + sum1_2 + sum1_3 + f_min(s, x, n, num_x)
sum2_1 <- x * sal + (d_b(n) - x ) * vp * I(x, 0, d_b(n))
sum2_2 <- (x-s)*cc*I(x,s)
sum2_3 <- (s-x) * d * I(x, 0, s)
sum2 <- sum2_1 + sum2_2 + sum2_3 + f_min(s, x, n, num_x)
p(n) * sum1 + (1-p(n)) * sum2
}
f_d_x(1,3,3)
n=3
d_a(n)
s
x
f_d_x(s,x,n)
library(twitteR)
z<-searchTwitter("#gold",n=150)
library(ROAuth)
load("/home/mbc/Dropbox/ITAM_Dropbox/Métodos Analíticos/Tareas_Git/Tarea_02/submuestra.RData")
head(submuestra)
names(submuestra)
noticias <- submuestra$Abstract[1:2000]
noticias <- data.frame(submuestra$Abstract[1:2000])
head(noticias)
a<-submuestra$Abstract[submuestra$Abstract>20]
length(submuestra$Abstract)
dimension(submuestra$Abstract)
as.char(submuestra$Abstract)
as(submuestra$Abstract, 'character')
nchar(submuestra$Abstract)
b<-nchar(as(submuestra$Abstract[0:100], character))
b<-as(submuestra$Abstract[0:100], 'character')
b[1:10]
nzchar(b[1:10])
rm(submuestra)
booleano<-nzchar(b)
b<-nchar(as(submuestra$Abstract, character))
b<-nchar(as(noticias, character))
noticias[1]
noticias[1]<-NULL
noticias[2]
load("/home/mbc/Dropbox/ITAM_Dropbox/Métodos Analíticos/Tareas_Git/Tarea_02/submuestra.RData")
?write.table
names(submuestra)
write.table(submuestra$Abstract, file='/home/mbc/Dropbox/ITAM_Dropbox/Métodos Analíticos/Tareas_Git/Tarea_02/noticias.csv', sep=',')
rm(submuestra)
source('~/.active-rstudio-document', echo=TRUE)
mod2 <- glm(Antilock ~ VehicleYear, family='binomial', data=insurance_sub)
summary(mod2)
mod3 <- glm(CarValue ~ VehicleYear + MakeModel, family='binomial', data=insurance_sub)
summary(mod3)
